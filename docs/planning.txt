Identifiers: [A-Za-z_][A-Za-z0-9_]*
Single-line Comment char: '
Multi-line comment char: `
Namespace separator: :
Namespace up-1 char: ?
Statement terminators: \n ;
Preprocessor char: #

Operators:

    1 (L->R):
        V ++        - Postfix increment
        V --        - Postfix decrement
        V ()        - Function call
        V []        - Array subscripting
        A . B       - Structure, union, and object member access
        < T > [ V ] - Array compound literal
        < T > { V } - Structure, union, and object compound literal
        V $         - Dereference
    2 (R->L):
        ++ V    - Prefix increment
        -- V    - Prefix decrement
        + V     - Unary positive
        - V     - Unary negative
        ! V     - Logical NOT
        ~ V     - Bitwise NOT
        < T >   - Casting
        @ V     - Reference
    3 (L->R):
        A * B   - Multiplication
        A / B   - Division
        A % B   - Remainder
    4 (L->R):
        A + B   - Addition
        A - B   - Subtraction
    5 (L->R):
        A & B   - Bitwise AND
    6 (L->R):
        A ^ B   - Bitwise XOR
    7 (L->R):
        A | B   - Bitwise OR
    8 (L->R):
        A << B  - Left shift
        A >> B  - Right shift
        A <<< B - Left rotate
        A >>> B - Right rotate
    9 (L->R):
        A < B   - Less than
        A <= B  - Less than or equal to
        A =< B
        A >= B  - Greater than or equal to
        A => B
        A > B   - Greater than
    10 (L->R):
        A == B  - Equal
        A != B  - Not equal
        A <> B
        A ~= B  - Approximately equal
    11 (L->R):
        A && B  - Logical AND
    12 (L->R):
        A || B  - Logical OR
    13 (R->L):
        A = B       - Assignment
        A += B      - Assignment with addition
        A -= B      - Assignment with subtraction
        A *= B      - Assignment with multiplication
        A /= B      - Assignment with division
        A %= B      - Assignment with remainder
        A <<= B     - Assignment with left shift
        A >>= B     - Assignment with right shift
        A <<<= B    - Assignment with left rotate
        A >>>= B    - Assignment with right rotate
        A &= B      - Assignment with bitwise AND
        A ^= B      - Assignment with bitwise XOR
        A |= B      - Assignment with bitwise OR

Builtins:

    Preprocessor commands:

        #DEL var
        #DIM var [AS type] [, var [AS type]]...
        #IF cond
            [text]
        #ELIF cond
            [text]
        #ELSE cond
            [text]
        #END
        #LET var = val [, var = val]...
        #REQUIRE "ext_name"

    Preprocessor functions:

        SET(var) BOOL
        HASEXT("ext_name") BOOL

    Keywords:

        CALLSUB(name [arg [, arg]...]) ANY
        DECLSUB name [ ([type [name] [, type [name]]...]) ] [return_type]
        DEL name [, name]...
        DELSUB sub [, sub]...
        DIM var [AS type] [, var [AS type]]...
        EXIT [val]
        LEN(val) USZ
        [LET] var = val [, var = val]...
        OBJECT name
            type name
        END
        OPR { {PREINC|PREDEC|POSTINC|POSTDEC|ADD|SUB|MUL|DIV|REM \
              |LSHIFT|RSHIFT|LROT|RROT|NOT|AND|OR|XOR \
              |LOGOR|LOGAND|LOGNOT|EQ|NEQ|LT|LE|GT|GE} \
              (lefttype left, righttype right) outtype \
            | CAST (fromtype from) totype }
            [statements]
        END
        SIZE({ TYPE type | TYPEOF val })
        STRUCT [name]
            {[IUF]*|REF()} name [, name]...
        END
        SUB name [ ([type [name] [, type [name]]...]) ] [return_type]
            [statements]
        END
        TYPEDEF name type
        UNION [name]
            [IUF]* name [, name]...
        END
        UNUSING name [, name]...
        USING name [, name]...

    Program flow keywords:

        IF cond
            [statements]
        ELIF cond
            [statements]
        ELSE
            [statements]
        END
        WHILE cond
            [statements]
        END
        DO
            [statements]
        LOOP [cond]
        FOR [type var = val], cond [, expr]...
            [statements]
        END
        BREAK
        SWITCH val
            CASE val
                [statements]
            END
            DEFAULT
                [statements]
            END
        END
        FALL val
        name:
        GOTO label
        RETURN [val]

    Functions:

        ABS(val) [IUF]*
        CEIL(val) {F32|F64}
        FLOOR(val) {F32|F64}
        MAX(val, val [, val]...) [IUF]*
        MIN(val, val [, val]...) [IUF]*
        ROUND(val) {F32|F64}
        STR(val [, base [, [uppercase], [, padto [, padchar]]]]) STR

    Types:

        ANY
        ...
        NULL
        VOID
        STR
        BOOL
        I8
        I16
        I32
        I64
        U8
        U16
        U32
        U64
        ISZ
        USZ
        F32
        F64
        CONST()
        REF()
        NULLABLE()

    Other:

        NULL

Extensions:

    Standard library (std):

        Commands and functions:

            CHDIR("path") BOOL
            CLOSE id
            DATE([{LOCAL|UTC}]) DATE
            ERRNO() I32
            EXEC( \
                { PATH "path" | NAME "name" } \
                [, IN i32ref] [, OUT i32ref] [, ERR i32ref] \
                [, ENV {"var=val"|"var=val"[]}]... \
                [, ARGV {"argv0"|"list"[1...]} [, {"arg"|"list"[]}]...] \
            ) PID
            FLUSH(id) BOOL
            FPRINT id [, val]...
            FPRINTLN id [, val]...
            GETC(id) I32
            GETENV("var") {STR|NULL}
            GETS(id) {STR|NULL}
            ISFILE("path") I32
            KILL(pid, signal) BOOL
            FILES(["path"]) DIRENT[]
            MKDIR("path" [, "path"]...) BOOL
            MOVE("path" [, "path"]...) BOOL
            OPEN("path", mode) I32
            PRINT [val [, val]...]
            PRINTLN [val [, val]...]
            PUTC(id, val [, val]...) BOOL
            PUTS(id, "val" [, "val"]...) BOOL
            READ(id, len) {STR|NULL}
            READTO(id, strref, len) ISZ
            REMOVE("path" [, "path"]...) BOOL
            RMDIR("path" [, "path"]...) BOOL
            SEEK(id, whence, off) ISZ
            SETENV("var", "val" [, overwrite]) BOOL
            SETERRNO val
            SLEEP(time [, remtimeref]) BOOL
            STRERROR(errno) STR
            STRDATE(date [, "format"]) STR
            TELL(id) ISZ
            TIME([{REALTIME|MONOTONIC}]) TIME
            TIMEADJ({TIME|T|S|MS|US|NS} val, { {ADD|SUB} {TIME|T|S|MS|US|NS} val | CONV {TIME|T|S|MS|US|NS} }) {TIME|[UI]*}
            TRAP { ON sig, sub | IGNORE sig } [, { ON sig, sub | IGNORE sig }]...
            WAIT(id [, retorsigref]) BOOL
            WRITE(id, data [, { len | start, len } ]) ISZ

        Types:

            STRUCT TIME
                I64 SEC
                I64 NSEC
            END
            STRUCT DATE
                I32 SEC
                I32 MIN
                I32 HOUR
                I32 MDAY
                I32 MON
                I32 YEAR
                I32 WDAY
                I32 YDAY
                I32 ISDST
            END
            OBJECT DIRENT
                STR NAME
                U8 TYPE
            END
            PID (I)

        Enums:

            E*
            FILETYPE_DIR
            FILETYPE_FILE
            FILETYPE_SPECIAL
            FILETYPE_UNKNOWN
            SEEK_CUR
            SEEK_END
            SEEK_SET
            SIG*

        Constants:

            EOF
            STDERR
            STDIN
            STDOUT

    Shell (shell), requires 'std':

        Preprocessor commands:

            #!
            #INCLUDE "path"
            #LOADPLUGIN { NAME "name" | PATH "path" }

        Preprocessor functions:

            FINDPLUGIN({ NAME "name" | PATH "path" }) BOOL
            LOADPLUGIN({ NAME "name" | PATH "path" }) BOOL

        Commands and functions:

            ARGC() I32
            ARGV([n]) ANY
            CALL("path" [, arg]...) {ANY|NULL}
            {CLS|CLEAR}
            COLOR { SET { fgc [, bgc] | [fgc], bgc } | RESET }
            GETEXEC() {STR|NULL}
            INPUT {NORMAL|SILENT|PASSWORD} ref [, ref]...
            RUN( \
                "path" \
                [, IN i32ref] [, OUT i32ref] [, ERR i32ref] \
                [, ENV {"var=val"|"var=val"[]}]... \
                [, ARGS {"argv0"|"list"[1...]} [, {"arg"|"list"[]}]...] \
            ) USZ
            WAITRUN(id) ANY

        Enums:

            ARCH_AMD64
            ARCH_ARM
            ARCH_ARM64
            ARCH_I386
            ARCH_MIPS
            ARCH_PPC
            ARCH_UNKNOWN
            PLAT_FREEBSD
            PLAT_LINUX
            PLAT_MACOS
            PLAT_NETBSD
            PLAT_OPENBSD
            PLAT_UNIX
            PLAT_UNKNOWN
            PLAT_WIN32

        Constants:

            ARCH
            PLATFORM
            RUN_FAIL

    Interactive shell (ishell), requires 'shell':

        Commands and functions:

            /[0-9]+/ [statement]
            WHITEOUT [, { start [, end] | [start], end }]
            EXIT [val]
            FINDPLUGIN({ NAME "name" | PATH "path" }) BOOL
            HIST \
                { FILE "path" | LEN val | LIST { start [, end] | [start], end } | {INS|REPL} ind, "val" \
                | ADD "val" | DEL { start [, end] | [start], end } | CLEAR }
            LIST [{ start [, end] | [start], end }]
            LOAD "path" [, { start [, end] | [start], end }]
            LOADPLUGIN({ NAME "name" | PATH "path" }) BOOL
            PROMPT {PRI|SEC} "val"
            RUN
            SAVE "path" [, { start [, end] | [start], end }]

    Math (math), optionally requires 'std':

        Functions:

            ACOS(val) {F32|F64}
            ACOSH(val) {F32|F64}
            ASIN(val) {F32|F64}
            ASINH(val) {F32|F64}
            ATAN(val) {F32|F64}
            ATANH(val) {F32|F64}
            ATAN2(val) {F32|F64}
            COS(val) {F32|F64}
            COSH(val) {F32|F64}
            EXP(val) {F32|F64}
            LOG(val) {F32|F64}
            LOG10(val) {F32|F64}
            MOD(val) {F32|F64}
            POW(base, exp) {F32|F64}
            SIN(val) {F32|F64}
            SINH(val) {F32|F64}
            SQRT(val) {F32|F64}
            TAN(val) {F32|F64}
            TANH(val) {F32|F64}

    Threading (threading), optionally requires 'std':

        Functions:

            ACCLOCK:CREATE() USZ
            ACCLOCK:ACQREAD(id) BOOL
            ACCLOCK:ACQWRITE(id) BOOL
            ACCLOCK:DESTROY id
            ACCLOCK:RLSREAD id
            ACCLOCK:RLSWRITE id
            ACCLOCK:READTOWRITE(id) BOOL
            ACCLOCK:WRITETOREAD(id) BOOL
            ACCLOCK:YIELDREAD id
            CND:BROADCAST id
            CND:CREATE() USZ
            CND:DESTROY id
            CND:SIGNAL id
            CND:TIMEDWAIT(id, time) BOOL
            CND:WAIT id
            MTX:CREATE() USZ
            MTX:DESTROY id
            MTX:LOCK id
            MTX:TIMEDLOCK(id, time) BOOL
            MTX:TRYLOCK(id)
            MTX:UNLOCK id
            THRD:CREATE(sub [, arg]...) USZ
            THRD:DESTROY(id) {ANY|NULL}
            YIELD

        Constants:

            ACCLOCK:CREATEFAIL = <USZ>-1
            CND:CREATEFAIL = <USZ>-1
            MTX:CREATEFAIL = <USZ>-1
            THRD:CREATEFAIL = <USZ>-1

---

Examples:

    foo = <bar>2.3
    foo = <const(bar)>2.3
    bar = <ref(const(bar))>@foo
    foo = <bar[]>[2.3]
    foo = <bar[5]>[1.1, 1.2, 1.3, 1.4, 1.5]
    foo = <baz>{.a = 1, .b = 2}
    foo = <baz[]>[{.a = 1, .b = 2}, {.a = 3, .b = 4}]

    NAMESPACE abc
        test = 3
        NAMESPACE foo
            DIM bar
            NAMESPACE bar
                SUB baz1(INT a, INT b)
                    ?bar = a + b
                    ++??test
                END
                SUB baz2 INT
                    ??test += 5
                    RETURN ?bar + ??test
                END
                SUB baz3(INT a) INT
                    ??test += 5 - a
                    RETURN ?bar + ??test
                END
            END
        END
    END
    abc:foo:bar = 456
    abc:foo:bar:baz1 10, 20
    abc:foo:bar:baz2
    PRINT abc:foo:bar:baz2()

